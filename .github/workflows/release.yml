---
name: Release

"on":
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Build frontend
        run: |
          npm install
          npm run build

      - name: Build Linux binary
        run: |
          # Get version info
          VERSION=${GITHUB_REF_NAME#v}

          # Build with version info
          CGO_ENABLED=0 go build \
            -ldflags "-X main.version=${VERSION}" \
            -o lodge-linux-amd64 .

      - name: Create .deb package
        run: |
          # Get version from tag
          VERSION=${GITHUB_REF_NAME#v}

          # Create debian package structure
          mkdir -p lodge-deb/DEBIAN
          mkdir -p lodge-deb/usr/bin
          mkdir -p lodge-deb/usr/share/doc/lodge

          # Copy binary
          cp lodge-linux-amd64 lodge-deb/usr/bin/lodge
          chmod 755 lodge-deb/usr/bin/lodge

          # Create control file
          cat > lodge-deb/DEBIAN/control <<EOF
          Package: lodge
          Version: ${VERSION}
          Section: web
          Priority: optional
          Architecture: amd64
          Maintainer: Matthew Phillips <matthew@matthewphillips.info>
          Description: A simple, cozy headless CMS
           Lodge CMS is a simple headless CMS with emphasis on ease of
           deployment.
           Ships as a single binary with embedded web UI and SQLite database.
          EOF

          # Build the package
          dpkg-deb --build lodge-deb
          mv lodge-deb.deb lodge_${VERSION}_amd64.deb

      - name: Build Debian repository structure
        run: |
          # Get version from tag
          VERSION=${GITHUB_REF_NAME#v}
          export VERSION

          # Create repository structure
          mkdir -p debian-repo/pool/main/l/lodge
          mkdir -p debian-repo/dists/stable/main/binary-amd64

          # Copy the .deb file to pool
          cp lodge_${VERSION}_amd64.deb debian-repo/pool/main/l/lodge/

          # Generate Packages file
          cd debian-repo
          dpkg-scanpackages pool/ > dists/stable/main/binary-amd64/Packages
          gzip -c dists/stable/main/binary-amd64/Packages > \
            dists/stable/main/binary-amd64/Packages.gz

          # Create Release file for component
          cat > dists/stable/main/binary-amd64/Release <<EOF
          Archive: stable
          Version: ${VERSION}
          Component: main
          Origin: Lodge CMS
          Label: Lodge CMS
          Architecture: amd64
          EOF

          # Create main Release file
          cat > dists/stable/Release <<EOF
          Origin: Lodge CMS
          Label: Lodge CMS
          Suite: stable
          Version: ${VERSION}
          Codename: stable
          Date: $(date -R)
          Architectures: amd64
          Components: main
          Description: Lodge CMS Debian Repository
          EOF

          # Add MD5 checksums to Release file
          echo "MD5Sum:" >> dists/stable/Release
          (cd dists/stable && \
            for file in main/binary-amd64/Packages*; do
              size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file")
              md5=$(md5sum "$file" | awk '{print $1}')
              echo " ${md5} ${size} ${file}" >> Release
            done
          )

          # Add SHA256 checksums to Release file
          echo "SHA256:" >> dists/stable/Release
          (cd dists/stable && \
            for file in main/binary-amd64/Packages*; do
              size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file")
              sha256=$(sha256sum "$file" | awk '{print $1}')
              echo " ${sha256} ${size} ${file}" >> Release
            done
          )

          # Sign the Release file - this step will be moved to the release job
          # (Signing needs to happen after GPG key is imported)

          cd ..

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: lodge-linux-amd64
          path: lodge-linux-amd64

      - name: Upload .deb artifact
        uses: actions/upload-artifact@v4
        with:
          name: lodge-deb
          path: lodge_*_amd64.deb

      - name: Upload Debian repository artifact
        uses: actions/upload-artifact@v4
        with:
          name: debian-repo
          path: debian-repo/

  build-freebsd:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build in FreeBSD VM
        uses: vmactions/freebsd-vm@v1
        with:
          usesh: true
          prepare: |
            pkg install -y go124 npm node22

          run: |
            # Set Go to use the installed version
            export PATH=/usr/local/go124/bin:$PATH

            # Build frontend
            npm install
            npm run build

            # Build FreeBSD binary
            VERSION=${GITHUB_REF_NAME#v}

            CGO_ENABLED=0 go build \
              -ldflags "-X main.version=${VERSION}" \
              -o lodge-freebsd-amd64 .

            # Build FreeBSD package
            export VERSION
            ./freebsd-package/build-package.sh

      - name: Upload FreeBSD artifact
        uses: actions/upload-artifact@v4
        with:
          name: lodge-freebsd-amd64
          path: lodge-freebsd-amd64

      - name: Upload FreeBSD package artifact
        uses: actions/upload-artifact@v4
        with:
          name: lodge-freebsd-pkg
          path: |
            repo/
            lodge-*.pkg

  release:
    needs: [build-linux, build-freebsd]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: lodge-linux-amd64

      - name: Download FreeBSD artifact
        uses: actions/download-artifact@v4
        with:
          name: lodge-freebsd-amd64

      - name: Download .deb artifact
        uses: actions/download-artifact@v4
        with:
          name: lodge-deb

      - name: Download Debian repository artifact
        uses: actions/download-artifact@v4
        with:
          name: debian-repo
          path: debian-repo

      - name: Download FreeBSD package artifact
        uses: actions/download-artifact@v4
        with:
          name: lodge-freebsd-pkg

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            lodge-linux-amd64
            lodge-freebsd-amd64
            lodge_*_amd64.deb
            lodge-*.pkg
          generate_release_notes: true
          draft: false
          prerelease: false

      - name: Combine package repositories
        run: |
          # Create combined repository structure
          mkdir -p gh-pages/freebsd
          mkdir -p gh-pages/debian

          # Copy FreeBSD repository
          cp -r repo/* gh-pages/freebsd/

          # Copy Debian repository
          cp -r debian-repo/* gh-pages/debian/

          # Sign the Debian repository Release file
          cd gh-pages/debian
          gpg --detach-sign --armor --output dists/stable/Release.gpg dists/stable/Release
          gpg --clear-sign --armor --output dists/stable/InRelease dists/stable/Release
          cd ../..

          # Export public key for users
          gpg --armor --export > gh-pages/debian/gpg-key.asc

          # Generate index.html with installation instructions
          ./scripts/generate-index.sh gh-pages

      - name: Publish packages to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./gh-pages
